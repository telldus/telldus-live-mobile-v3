apply plugin: "com.android.application"
apply plugin: "io.fabric"

import com.android.build.OutputFile

def readVersion() {
    def parsedJson = new groovy.json.JsonSlurper().parseText(file('../../package.json').text)
    return parsedJson.version
}

def readVersionCode() {
    def version = readVersion()
    def (major, minor, patch) = version.tokenize('.')
    def additive = 3145728;
    return (major.toInteger() * 10000) + (minor.toInteger() * 100) + (patch.toInteger()) + additive
}

/**
 * The react.gradle file registers a task for each build variant (e.g. bundleDebugJsAndAssets
 * and bundleReleaseJsAndAssets).
 * These basically call `react-native bundle` with the correct arguments during the Android build
 * cycle. By default, bundleDebugJsAndAssets is skipped, as in debug/dev mode we prefer to load the
 * bundle directly from the development server. Below you can see all the possible configurations
 * and their defaults. If you decide to add a configuration block, make sure to add it before the
 * `apply from: "../../node_modules/react-native/react.gradle"` line.
 *
 * project.ext.react = [
 *   // the name of the generated asset file containing your JS bundle
 *   bundleAssetName: "index.android.bundle",
 *
 *   // the entry file for bundle generation
 *   entryFile: "index.android.js",
 *
 *   // whether to bundle JS and assets in debug mode
 *   bundleInDebug: false,
 *
 *   // whether to bundle JS and assets in release mode
 *   bundleInRelease: true,
 *
 *   // whether to bundle JS and assets in another build variant (if configured).
 *   // See http://tools.android.com/tech-docs/new-build-system/user-guide#TOC-Build-Variants
 *   // The configuration property can be in the following formats
 *   //         'bundleIn${productFlavor}${buildType}'
 *   //         'bundleIn${buildType}'
 *   // bundleInFreeDebug: true,
 *   // bundleInPaidRelease: true,
 *   // bundleInBeta: true,

 *   // whether to disable dev mode in custom build variants (by default only disabled in release)
 *   // for example: to disable dev mode in the staging build type (if configured)
 *   devDisabledInStaging: true,
 *   // The configuration property can be in the following formats
 *   //         'devDisabledIn${productFlavor}${buildType}'
 *   //         'devDisabledIn${buildType}'
 *
 *
 *   // the root of your project, i.e. where "package.json" lives
 *   root: "../../",
 *
 *   // where to put the JS bundle asset in debug mode
 *   jsBundleDirDebug: "$buildDir/intermediates/assets/debug",
 *
 *   // where to put the JS bundle asset in release mode
 *   jsBundleDirRelease: "$buildDir/intermediates/assets/release",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in debug mode
 *   resourcesDirDebug: "$buildDir/intermediates/res/merged/debug",
 *
 *   // where to put drawable resources / React Native assets, e.g. the ones you use via
 *   // require('./image.png')), in release mode
 *   resourcesDirRelease: "$buildDir/intermediates/res/merged/release",
 *
 *   // by default the gradle tasks are skipped if none of the JS files or assets change; this means
 *   // that we don't look at files in android/ or ios/ to determine whether the tasks are up to
 *   // date; if you have any other folders that you want to ignore for performance reasons (gradle
 *   // indexes the entire tree), add them here. Alternatively, if you have JS files in android/
 *   // for example, you might want to remove it from here.
 *   inputExcludes: ["android/**", "ios/**"],
 *
 *   // override which node gets called and with what additional arguments
 *   nodeExecutableAndArgs: ["node"]
 *
 *   // supply additional arguments to the packager
 *   extraPackagerArgs: []
 * ]
 */

project.ext.react = [
    entryFile: "index.js",
    extraPackagerArgs: ["--sourcemap-output", file("$buildDir/../../sourcemap.js")]
]

apply from: "../../node_modules/react-native/react.gradle"

/**
 * Set this to true to create two separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on x86 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

android {

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.telldus.live.mobile"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode readVersionCode()
        versionName readVersion()
        multiDexEnabled true
        manifestPlaceholders = [googleMapsAPIKey: GOOGLE_MAPS_API_KEY, pushSenderId: PUSH_SENDER_ID]
    }
    signingConfigs {
        release {
            storeFile file(TELLDUS_REACT_NATIVE_LOCAL_STORE_FILE)
            storePassword TELLDUS_REACT_NATIVE_LOCAL_STORE_PASSWORD
            keyAlias TELLDUS_REACT_NATIVE_LOCAL_KEY_ALIAS
            keyPassword TELLDUS_REACT_NATIVE_LOCAL_KEY_PASSWORD
        }
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ""
            buildConfigField "String", "TELLDUS_API_SERVER", TELLDUS_API_SERVER
        }
        release {
            applicationIdSuffix ""
            minifyEnabled enableProguardInReleaseBuilds
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            buildConfigField "String", "TELLDUS_API_SERVER", TELLDUS_API_SERVER
        }
    }
    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // http://tools.android.com/tech-docs/new-build-system/user-guide/apk-splits
            def versionCodes = ["armeabi-v7a":1, "x86":2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
    lintOptions{
        disable 'MissingTranslation'
    }
}

dependencies {
    implementation project(':@react-native-community_async-storage')
    implementation project(':@react-native-community_netinfo')
    implementation project(':react-native-fetch-blob')
    implementation project(':react-native-gesture-handler')
    implementation project(':react-native-orientation-locker')
    implementation project(':react-native-svg')
    implementation(project(':react-native-firebase')) {
        exclude group: "com.google.firebase"
    }
    implementation 'me.leolin:ShortcutBadger:1.1.21@aar'
    implementation(project(':react-native-maps')){
        exclude group: 'com.google.android.gms'
    }
    implementation (project(':react-native-device-info')){
        exclude group: "com.google.android.gms"
    }
    implementation project(':react-native-rsa-native')
    implementation project(':react-native-udp')
    implementation project(':react-native-sensitive-info')
    implementation project(':react-native-accessibility')
    implementation project(':react-native-i18n')
    implementation project(':react-native-extra-dimensions-android')
    implementation project(':react-native-vector-icons')
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "com.android.support:appcompat-v7:${rootProject.ext.supportLibVersion}"
    // Specifying and forcing exact RN version used in package.json . This is to fix issue of RN mismatch 
    // https://github.com/facebook/react-native/issues/19259#issuecomment-389064401
    // will need to update here too on upgrading RN.
    implementation ("com.facebook.react:react-native:0.59.5")
    {
        force = true
    }
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.6') {
      transitive = true;
    }
    implementation project(':react-native-sqlite-storage')
    implementation 'com.android.support:multidex:1.0.2'
    implementation ("com.google.android.gms:play-services-base:16.1.0") {
        force = true;
    }
    implementation ("com.google.android.gms:play-services-maps:16.0.0") {
        force = true;
    }
    implementation ("com.google.android.gms:play-services-gcm:16.0.0") {
        force = true;
    }
    implementation ('com.google.firebase:firebase-core:16.0.8') {
        force = true;
    }
    implementation ('com.google.firebase:firebase-messaging:17.5.0') {
        force = true;
    }
    implementation(project(":react-native-google-signin")){
        exclude group: "com.google.android.gms"
    }
    implementation ('com.google.android.gms:play-services-auth:16.0.0') {
        force = true;
    }
    implementation "com.amitshekhar.android:jackson-android-networking:1.0.0"
    implementation 'com.github.siyamed:android-shape-imageview:0.9.+@aar'
    implementation 'com.google.android:flexbox:1.0.0'
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.compile
    into 'libs'
}

apply plugin: 'com.google.gms.google-services'